<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head lang="en">
<link rel="stylesheet" type="text/css" href="/shared/css/TemplateFiles/stylesheet.css" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Syllabus</title>
</head>

<body>
<div sizset="0" sizcache="1" id="container">
<div id="decorative">&nbsp;&nbsp;</div>
<div id="header">
<h1><img src="../images/icons/CourseInfo-yellow_64.png" />&nbsp;Coding Standards</h1>
</div>
<div sizset="0" sizcache="1" id="body">
  	<p><a name="codingStart" id="codingStart"></a> You will need to do your work according to the <b>coding standards</b> for this course, which consist of the following requirements:	</p>
	<ul>
		<li><a href="#meaningfulNames">meaningful names</a></li>
    	<li><a href="#comments">comments for non-obvious code</a></li>
    	<li><a href="#tabs">consistent tab discipline</a></li>
    	<li><a href="#lineUpNames">line up variable names</a></li>
  	</ul>
	<p>Remember that I have to read your code. By following these coding standards, you will make your code much easier for me to read. If I look at your code and I can&rsquo;t figure it out, your work will not be accepted. <a name="meaningfulNames" id="meaningfulNames"></a>	</p>
	<h2>Meaningful Names</h2>
	<p>Your names for procedures and variables must be meaningful, which will often mean that they are <i>long</i>. If (for example) your code is keeping track of the number of records in a database, then the variable that contains that number should be named something like <b class="code">nRecords</b> or <b class="code">numRecords</b>. Do <i>not</i> just name the variable <b class="code">n</b>. <br />
		<br />
		Sometimes single-character names are OK. If you write a procedure that takes a <tt>double</tt>, rounds it off, and returns an <tt>int</tt>, it&rsquo;s OK to name that procedure&rsquo;s argument something like <tt>x</tt>, <tt>n</tt>, etc. Just use your common sense. <br />
		<br />
		<i>Back to <a href="#codingStart">top</a>.</i> <a name="comments" id="comments"></a>	</p>
	<h2>Comments For Non-Obvious Code</h2>
	<p>I do not believe in rigid commenting requirements. What I <i>do</i> require is that you comment anything in your code which is not immediately obvious. <br />
		<br />
	So if you have a procedure that increments a counter, and you name that procedure &ldquo;<tt>incrementCounter</tt>&rdquo;, you do not also have to have a comment for that procedure that says: </p>
	<pre class="code codeBlue">
    // this procedure increments the counter
	</pre>
	<p>  But if you have some complicated code whose purpose is not immediately obvious, then these standards require you to write a comment explaining what that code does. This will not only help <i>me</i> understand your code, this will help <i>you</i> understand your code when you look at it two weeks later and your mind is not operating at the same high pitch of inspiration that it was when you created the code. <br />
		<br />
		<i>Back to <a href="#codingStart">top</a>.</i> <a name="tabs" id="tabs"></a>	</p>
	<h2>Consistent Tab Discipline</h2>
	<p>Proper tabbing is <i>very</i> important for the readability of your code. <br />
		<br />
		Set your text editor to replace all tab characters with spaces when you save your source file. Your code will not line up properly on my computer unless you do this. And if it doesn&rsquo;t line up properly, it will not be accepted. <br />
		<br />
		If your editor of choice does not have this feature, then set it to tab at 4 spaces per tab, which is what I will be using on my machine. <br />
		<br />
		This code is properly tabbed, at 4 spaces per tab:	</p>
	<pre class="code codeBlue">
    char    *arg1;
    char    *arg2;

    int main (int argc, char **argv)
    {
        if (argc &lt;= 1)
            // remember that the name of the program counts as an argument
            printf(&quot;there are no arguments\n&quot;);
        else if (argc == 2)
            printf(&quot;you only typed one argument\n&quot;);
        else {
            arg1 = argv[1];
            arg2 = argv[2];
            printf(&quot;you typed \&quot;%s\&quot; and \&quot;%s\&quot;\n&quot;, arg1, arg2);
            }
        return 0;
    }
	</pre>
	<p>  You may tab your code at 2, 3, 4, or 8 spaces per tab, whichever you prefer. <br />
		<br />
		This code is not properly tabbed:	</p>
	<pre class="code codeBlue">
    char    *arg1;
    char    *arg2;

    int main (int argc, char **argv)
    {
    if (argc &lt;= 1)
    // remember that the name of the program counts as an argument
    printf(&quot;there are no arguments\n&quot;);
    else if (argc == 2)
    printf(&quot;you only typed one argument\n&quot;);
    else {
    arg1 = argv[1];
    arg2 = argv[2];
    printf(&quot;you typed \&quot;%s\&quot; and \&quot;%s\&quot;\n&quot;, arg1, arg2);
    }
    return 0;
    }
	</pre>
	<p> It&rsquo;s clear which one is easier to read. <br />
		<br />
	There are many ways to tab your code properly. Here&rsquo;s one way, which is what I use: </p>
	<pre class="code codeBlue">
    for (i = 0; i &lt; arrayLgth; i++) {
        array[i] = i;
        printf(&quot;set array element %d to %d\n&quot;, i, i);
        }
	</pre>
	<p> Here&rsquo;s another way: </p>
	<pre class="code codeBlue">
    for (i = 0; i &lt; arrayLgth; i++)
    {
        array[i] = i;
        printf(&quot;set array element %d to %d\n&quot;, i, i);
    }
	</pre>
	<p> I don&rsquo;t care how you decide to tab your code. I only care that you do it in a consistent and sensible way, so that I can read your code without tying my brain in knots. <br />
		<br />
	Finally, it&rsquo;s OK with me for you to leave out the { and } braces when there&rsquo;s just one line of code to put in them. In other words, it&rsquo;s OK to do this: </p>
	<pre class="code codeBlue">
    for (i = 0; i &lt; arrayLgth; i++)
        array[i] = i;
	</pre>
	<p>  instead of this:	</p>
	<pre class="code codeBlue">
    for (i = 0; i &lt; arrayLgth; i++)
    {
        array[i] = i;
    }
	</pre>
	<p>  Just be careful to put the { and } back in if you need to add a line to a one-line loop. Look at the following code:	</p>
	<pre class="code codeBlue">
    for (i = 0; i &lt; arrayLgth; i++)
        array[i] = i;
        printf(&quot;set array element %d to %d\n&quot;, i, i);
	</pre>
	<p> How many lines will this code print? Didn&rsquo;t you really mean to do this instead? </p>
	<pre class="code codeBlue">
    for (i = 0; i &lt; arrayLgth; i++) {
        array[i] = i;
        printf(&quot;set array element %d to %d\n&quot;, i, i);
        }
	</pre>
	<i>Answer: the first version prints just one line, the second prints one line for each element of the array.</i> <br />
	<br />
	<i>Back to <a href="#codingStart">top</a>.</i> <a name="lineUpNames" id="lineUpNames"></a>
	<h2>Line Up Variable Names</h2>
	<p>Code is easier to read when you line up your variable names at a convenient tab stop. In other words, it&rsquo;s easier to read this: </p>
	<pre class="code codeBlue">
    int       globalVariable;
    double    anotherGlobal;
    char      *globalString;

    void someProc ()
    {
        int         localVariable;
        double      anotherLocal;
        char        *localString;

        // code ...
        }
    }
	</pre>
	<p>  than this:	</p>
	<pre class="code codeBlue">
    int globalVariable;
    double anotherGlobal;
    char *globalString;

    void someProc ()
    {
        int localVariable;
        double anotherLocal;
        char *localString;

        // code ...
        }
    }
	</pre>
	<p><i>Back to <a href="#codingStart">top</a>.</i>
 </div>
<div style="text-align: center;" id="footer"><i>Course Information</i></div>
</div>
</body>
</html>